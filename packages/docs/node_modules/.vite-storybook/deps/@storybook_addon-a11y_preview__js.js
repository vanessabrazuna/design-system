import {
  init_es_array_join
} from "./chunk-POCPT3U5.js";
import {
  addons,
  init_public_api
} from "./chunk-DFA3WQC6.js";
import "./chunk-HICDADZL.js";
import "./chunk-T2GV6HSJ.js";
import {
  STORY_CHANGED,
  init_esm
} from "./chunk-SJQGZXKU.js";
import "./chunk-XQHEQSNO.js";
import {
  init_es_array_from,
  init_es_array_map
} from "./chunk-V4BZBGBT.js";
import "./chunk-4N4NTJDH.js";
import {
  init_es_promise
} from "./chunk-YCPPB233.js";
import "./chunk-WPY5POTM.js";
import "./chunk-VMSOYUTG.js";
import "./chunk-QVLQTGN2.js";
import "./chunk-PN4LH56F.js";
import "./chunk-EP54ODTC.js";
import "./chunk-D7WZDEWY.js";
import "./chunk-RJIYXGQU.js";
import "./chunk-S5Z5BHA5.js";
import "./chunk-IY6AN3JH.js";
import {
  init_es_set
} from "./chunk-3SW3PRRK.js";
import {
  init_es_array_concat,
  init_web_dom_collections_iterator,
  require_es_array_iterator,
  require_es_string_iterator
} from "./chunk-PLSMKMBV.js";
import {
  init_es_object_to_string
} from "./chunk-RWJ7226N.js";
import {
  require_window
} from "./chunk-MBRSQHGS.js";
import {
  __commonJS,
  __esm,
  __toESM
} from "./chunk-MF7N2UXY.js";

// ../../node_modules/@storybook/addon-a11y/node_modules/regenerator-runtime/runtime.js
var require_runtime = __commonJS({
  "../../node_modules/@storybook/addon-a11y/node_modules/regenerator-runtime/runtime.js"(exports, module) {
    var runtime = function(exports2) {
      "use strict";
      var Op = Object.prototype;
      var hasOwn = Op.hasOwnProperty;
      var defineProperty = Object.defineProperty || function(obj, key, desc) {
        obj[key] = desc.value;
      };
      var undefined2;
      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
      function define(obj, key, value) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
        return obj[key];
      }
      try {
        define({}, "");
      } catch (err) {
        define = function(obj, key, value) {
          return obj[key] = value;
        };
      }
      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []);
        defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) });
        return generator;
      }
      exports2.wrap = wrap;
      function tryCatch(fn, obj, arg) {
        try {
          return { type: "normal", arg: fn.call(obj, arg) };
        } catch (err) {
          return { type: "throw", arg: err };
        }
      }
      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed";
      var ContinueSentinel = {};
      function Generator() {
      }
      function GeneratorFunction() {
      }
      function GeneratorFunctionPrototype() {
      }
      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function() {
        return this;
      });
      var getProto = Object.getPrototypeOf;
      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        IteratorPrototype = NativeIteratorPrototype;
      }
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
      GeneratorFunction.prototype = GeneratorFunctionPrototype;
      defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: true });
      defineProperty(
        GeneratorFunctionPrototype,
        "constructor",
        { value: GeneratorFunction, configurable: true }
      );
      GeneratorFunction.displayName = define(
        GeneratorFunctionPrototype,
        toStringTagSymbol,
        "GeneratorFunction"
      );
      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function(method) {
          define(prototype, method, function(arg) {
            return this._invoke(method, arg);
          });
        });
      }
      exports2.isGeneratorFunction = function(genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
      };
      exports2.mark = function(genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;
          define(genFun, toStringTagSymbol, "GeneratorFunction");
        }
        genFun.prototype = Object.create(Gp);
        return genFun;
      };
      exports2.awrap = function(arg) {
        return { __await: arg };
      };
      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);
          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;
            if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
              return PromiseImpl.resolve(value.__await).then(function(value2) {
                invoke("next", value2, resolve, reject);
              }, function(err) {
                invoke("throw", err, resolve, reject);
              });
            }
            return PromiseImpl.resolve(value).then(function(unwrapped) {
              result.value = unwrapped;
              resolve(result);
            }, function(error) {
              return invoke("throw", error, resolve, reject);
            });
          }
        }
        var previousPromise;
        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function(resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }
          return previousPromise = previousPromise ? previousPromise.then(
            callInvokeWithMethodAndArg,
            callInvokeWithMethodAndArg
          ) : callInvokeWithMethodAndArg();
        }
        defineProperty(this, "_invoke", { value: enqueue });
      }
      defineIteratorMethods(AsyncIterator.prototype);
      define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
        return this;
      });
      exports2.AsyncIterator = AsyncIterator;
      exports2.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0)
          PromiseImpl = Promise;
        var iter = new AsyncIterator(
          wrap(innerFn, outerFn, self, tryLocsList),
          PromiseImpl
        );
        return exports2.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
      };
      function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }
          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            }
            return doneResult();
          }
          context.method = method;
          context.arg = arg;
          while (true) {
            var delegate = context.delegate;
            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);
              if (delegateResult) {
                if (delegateResult === ContinueSentinel)
                  continue;
                return delegateResult;
              }
            }
            if (context.method === "next") {
              context.sent = context._sent = context.arg;
            } else if (context.method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw context.arg;
              }
              context.dispatchException(context.arg);
            } else if (context.method === "return") {
              context.abrupt("return", context.arg);
            }
            state = GenStateExecuting;
            var record = tryCatch(innerFn, self, context);
            if (record.type === "normal") {
              state = context.done ? GenStateCompleted : GenStateSuspendedYield;
              if (record.arg === ContinueSentinel) {
                continue;
              }
              return {
                value: record.arg,
                done: context.done
              };
            } else if (record.type === "throw") {
              state = GenStateCompleted;
              context.method = "throw";
              context.arg = record.arg;
            }
          }
        };
      }
      function maybeInvokeDelegate(delegate, context) {
        var methodName = context.method;
        var method = delegate.iterator[methodName];
        if (method === undefined2) {
          context.delegate = null;
          if (methodName === "throw" && delegate.iterator["return"]) {
            context.method = "return";
            context.arg = undefined2;
            maybeInvokeDelegate(delegate, context);
            if (context.method === "throw") {
              return ContinueSentinel;
            }
          }
          if (methodName !== "return") {
            context.method = "throw";
            context.arg = new TypeError(
              "The iterator does not provide a '" + methodName + "' method"
            );
          }
          return ContinueSentinel;
        }
        var record = tryCatch(method, delegate.iterator, context.arg);
        if (record.type === "throw") {
          context.method = "throw";
          context.arg = record.arg;
          context.delegate = null;
          return ContinueSentinel;
        }
        var info = record.arg;
        if (!info) {
          context.method = "throw";
          context.arg = new TypeError("iterator result is not an object");
          context.delegate = null;
          return ContinueSentinel;
        }
        if (info.done) {
          context[delegate.resultName] = info.value;
          context.next = delegate.nextLoc;
          if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined2;
          }
        } else {
          return info;
        }
        context.delegate = null;
        return ContinueSentinel;
      }
      defineIteratorMethods(Gp);
      define(Gp, toStringTagSymbol, "Generator");
      define(Gp, iteratorSymbol, function() {
        return this;
      });
      define(Gp, "toString", function() {
        return "[object Generator]";
      });
      function pushTryEntry(locs) {
        var entry = { tryLoc: locs[0] };
        if (1 in locs) {
          entry.catchLoc = locs[1];
        }
        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }
        this.tryEntries.push(entry);
      }
      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }
      function Context(tryLocsList) {
        this.tryEntries = [{ tryLoc: "root" }];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }
      exports2.keys = function(val) {
        var object = Object(val);
        var keys = [];
        for (var key in object) {
          keys.push(key);
        }
        keys.reverse();
        return function next() {
          while (keys.length) {
            var key2 = keys.pop();
            if (key2 in object) {
              next.value = key2;
              next.done = false;
              return next;
            }
          }
          next.done = true;
          return next;
        };
      };
      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }
          if (typeof iterable.next === "function") {
            return iterable;
          }
          if (!isNaN(iterable.length)) {
            var i = -1, next = function next2() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next2.value = iterable[i];
                  next2.done = false;
                  return next2;
                }
              }
              next2.value = undefined2;
              next2.done = true;
              return next2;
            };
            return next.next = next;
          }
        }
        return { next: doneResult };
      }
      exports2.values = values;
      function doneResult() {
        return { value: undefined2, done: true };
      }
      Context.prototype = {
        constructor: Context,
        reset: function(skipTempReset) {
          this.prev = 0;
          this.next = 0;
          this.sent = this._sent = undefined2;
          this.done = false;
          this.delegate = null;
          this.method = "next";
          this.arg = undefined2;
          this.tryEntries.forEach(resetTryEntry);
          if (!skipTempReset) {
            for (var name in this) {
              if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                this[name] = undefined2;
              }
            }
          }
        },
        stop: function() {
          this.done = true;
          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;
          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }
          return this.rval;
        },
        dispatchException: function(exception) {
          if (this.done) {
            throw exception;
          }
          var context = this;
          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;
            if (caught) {
              context.method = "next";
              context.arg = undefined2;
            }
            return !!caught;
          }
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;
            if (entry.tryLoc === "root") {
              return handle("end");
            }
            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");
              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }
              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },
        abrupt: function(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }
          if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
            finallyEntry = null;
          }
          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;
          if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
          }
          return this.complete(record);
        },
        complete: function(record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }
          if (record.type === "break" || record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }
          return ContinueSentinel;
        },
        finish: function(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },
        "catch": function(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;
              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }
              return thrown;
            }
          }
          throw new Error("illegal catch attempt");
        },
        delegateYield: function(iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName,
            nextLoc
          };
          if (this.method === "next") {
            this.arg = undefined2;
          }
          return ContinueSentinel;
        }
      };
      return exports2;
    }(
      typeof module === "object" ? module.exports : {}
    );
    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      if (typeof globalThis === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
  }
});

// ../../node_modules/@storybook/addon-a11y/dist/esm/constants.js
var ADDON_ID, PANEL_ID, HIGHLIGHT_STYLE_ID, RESULT, REQUEST, RUNNING, ERROR, MANUAL, HIGHLIGHT, EVENTS;
var init_constants = __esm({
  "../../node_modules/@storybook/addon-a11y/dist/esm/constants.js"() {
    ADDON_ID = "storybook/a11y";
    PANEL_ID = "".concat(ADDON_ID, "/panel");
    HIGHLIGHT_STYLE_ID = "a11yHighlight";
    RESULT = "".concat(ADDON_ID, "/result");
    REQUEST = "".concat(ADDON_ID, "/request");
    RUNNING = "".concat(ADDON_ID, "/running");
    ERROR = "".concat(ADDON_ID, "/error");
    MANUAL = "".concat(ADDON_ID, "/manual");
    HIGHLIGHT = "".concat(ADDON_ID, "/highlight");
    EVENTS = {
      RESULT,
      REQUEST,
      RUNNING,
      ERROR,
      MANUAL,
      HIGHLIGHT
    };
  }
});

// ../../node_modules/@storybook/addon-a11y/dist/esm/a11yRunner.js
var require_a11yRunner = __commonJS({
  "../../node_modules/@storybook/addon-a11y/dist/esm/a11yRunner.js"(exports, module) {
    init_es_object_to_string();
    init_es_promise();
    var import_runtime = __toESM(require_runtime());
    var import_global = __toESM(require_window());
    init_public_api();
    init_constants();
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }
      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }
    function _asyncToGenerator(fn) {
      return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
          var gen = fn.apply(self, args);
          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }
          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }
          _next(void 0);
        });
      };
    }
    var document = import_global.default.document;
    var globalWindow = import_global.default.window;
    if (module && module.hot && module.hot.decline) {
      module.hot.decline();
    }
    var channel = addons.getChannel();
    var active = false;
    var activeStoryId;
    var handleRequest = function() {
      var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(storyId) {
        var _yield$getParams, manual;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return getParams(storyId);
              case 2:
                _yield$getParams = _context.sent;
                manual = _yield$getParams.manual;
                if (manual) {
                  _context.next = 7;
                  break;
                }
                _context.next = 7;
                return run(storyId);
              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return function handleRequest2(_x) {
        return _ref.apply(this, arguments);
      };
    }();
    var run = function() {
      var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(storyId) {
        var input, axe, _input$element, element, config, _input$options, options, htmlElement, result;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                activeStoryId = storyId;
                _context2.prev = 1;
                _context2.next = 4;
                return getParams(storyId);
              case 4:
                input = _context2.sent;
                if (active) {
                  _context2.next = 19;
                  break;
                }
                active = true;
                channel.emit(EVENTS.RUNNING);
                _context2.next = 10;
                return import("./axe-core.js");
              case 10:
                axe = _context2.sent.default;
                _input$element = input.element, element = _input$element === void 0 ? "#root" : _input$element, config = input.config, _input$options = input.options, options = _input$options === void 0 ? {} : _input$options;
                htmlElement = document.querySelector(element);
                axe.reset();
                if (config) {
                  axe.configure(config);
                }
                _context2.next = 17;
                return axe.run(htmlElement, options);
              case 17:
                result = _context2.sent;
                if (activeStoryId === storyId) {
                  channel.emit(EVENTS.RESULT, result);
                } else {
                  active = false;
                  run(activeStoryId);
                }
              case 19:
                _context2.next = 24;
                break;
              case 21:
                _context2.prev = 21;
                _context2.t0 = _context2["catch"](1);
                channel.emit(EVENTS.ERROR, _context2.t0);
              case 24:
                _context2.prev = 24;
                active = false;
                return _context2.finish(24);
              case 27:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[1, 21, 24, 27]]);
      }));
      return function run2(_x2) {
        return _ref2.apply(this, arguments);
      };
    }();
    var getParams = function() {
      var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(storyId) {
        var _ref4, parameters;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return globalWindow.__STORYBOOK_STORY_STORE__.loadStory({
                  storyId
                });
              case 2:
                _context3.t0 = _context3.sent;
                if (_context3.t0) {
                  _context3.next = 5;
                  break;
                }
                _context3.t0 = {};
              case 5:
                _ref4 = _context3.t0;
                parameters = _ref4.parameters;
                return _context3.abrupt("return", parameters.a11y || {
                  config: {},
                  options: {
                    restoreScroll: true
                  }
                });
              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));
      return function getParams2(_x3) {
        return _ref3.apply(this, arguments);
      };
    }();
    channel.on(EVENTS.REQUEST, handleRequest);
    channel.on(EVENTS.MANUAL, run);
  }
});

// ../../node_modules/@storybook/addon-a11y/dist/esm/highlight.js
var highlightStyle;
var init_highlight = __esm({
  "../../node_modules/@storybook/addon-a11y/dist/esm/highlight.js"() {
    highlightStyle = function highlightStyle2(color) {
      return "\n  outline: 2px dashed ".concat(color, ";\n  outline-offset: 2px;\n  box-shadow: 0 0 0 6px rgba(255,255,255,0.6);\n");
    };
  }
});

// ../../node_modules/@storybook/addon-a11y/dist/esm/a11yHighlight.js
var require_a11yHighlight = __commonJS({
  "../../node_modules/@storybook/addon-a11y/dist/esm/a11yHighlight.js"(exports, module) {
    init_es_array_from();
    var import_es_string_iterator = __toESM(require_es_string_iterator());
    var import_es_array_iterator = __toESM(require_es_array_iterator());
    init_es_object_to_string();
    init_es_set();
    init_web_dom_collections_iterator();
    init_es_array_join();
    init_es_array_map();
    init_es_array_concat();
    var import_global = __toESM(require_window());
    init_public_api();
    init_esm();
    init_constants();
    init_highlight();
    var document = import_global.default.document;
    if (module && module.hot && module.hot.decline) {
      module.hot.decline();
    }
    var channel = addons.getChannel();
    var highlight = function highlight2(infos) {
      var id = HIGHLIGHT_STYLE_ID;
      resetHighlight();
      var elements = Array.from(new Set(infos.elements));
      var sheet = document.createElement("style");
      sheet.setAttribute("id", id);
      sheet.innerHTML = elements.map(function(target) {
        return "".concat(target, "{\n          ").concat(highlightStyle(infos.color), "\n         }");
      }).join(" ");
      document.head.appendChild(sheet);
    };
    var resetHighlight = function resetHighlight2() {
      var id = HIGHLIGHT_STYLE_ID;
      var sheetToBeRemoved = document.getElementById(id);
      if (sheetToBeRemoved) {
        sheetToBeRemoved.parentNode.removeChild(sheetToBeRemoved);
      }
    };
    channel.on(STORY_CHANGED, resetHighlight);
    channel.on(EVENTS.HIGHLIGHT, highlight);
  }
});

// ../../node_modules/@storybook/addon-a11y/dist/esm/preview.js
var import_a11yRunner = __toESM(require_a11yRunner());
var import_a11yHighlight = __toESM(require_a11yHighlight());
//# sourceMappingURL=@storybook_addon-a11y_preview__js.js.map
